# Include common processes
source $(_decompose-project-root)/.decompose/environment/lib/web/processes
source $(_decompose-project-root)/.decompose/environment/lib/common/processes

# Declare processes
DECOMPOSE_PROCESSES=( 'build' 'up' 'import_db' 'explore_db' 'import_files'
  'tail-dev-email' 'drush' 'backup-db' 'explore-php-container'
  "${DECOMPOSE_WEB_PROCESSES[@]}" "${DECOMPOSE_COMMON_PROCESSES[@]}" )

_decompose-process-explore_db() {
  # Get the name of the database container
  local cid=$(docker-compose ps -q db)

  # Enter mysql
  local password_param=""
  if [ "$PROJECT_DB_PASSWORD" ]; then
    local password_param="-p$PROJECT_DB_PASSWORD"
  fi
  docker exec -it $cid bash -c "mysql -u $PROJECT_DB_USER $password_parm -D $PROJECT_DB_NAME"
}
_decompose-process-explore_db_help() {
  echo "  Explore database"
}

_decompose-process-explore-php-container() {
  # Get container id
  local cid=$(docker-compose ps -q php)

  # Enter php
  docker exec -it $cid bash

}
_decompose-process-explore-php-container_help() {
  echo "  Explore the php container"
}

_decompose-process-backup-db() {
  # Get the name of the database container
  local cid=$(docker-compose ps -q backup)

  # Run backup
  docker exec $cid duply site_data backup
}
_decompose-process-backup-db_help() {
  echo "  Manually start backup process"
}

_decompose-process-tail-dev-email() {
  # Get the name of the php container
  local db_container_name=$(docker-compose ps -q php)
  # Tail mail.out
  docker exec -it $db_container_name bash -c "tail -f /tmp/mail.out"
}
_decompose-process-tail-dev-email_help() {
  echo "  Tail the dev email messages being sent"
}

_decompose-process-build() {
  echo "Building decompose templates..."
  decompose-process-templates 

  echo "Creating version file..."
  local project_root=$(_decompose-project-root)
  local git_base_revision="`git -C $project_root describe --tags --match=v* --always --dirty 2>&1`"
  # Set current base version
  echo -e "$PROJECT_ENVIRONMENT\n$git_base_revision" > \
    "$project_root"/"$PROJECT_VERSION_FILE"

  # Pull the latest images
  # Waiting for docker-compose fix:
  # https://github.com/docker/compose/pull/1494
  echo "Updating docker images..."
  docker pull busybox
  docker pull debian:jessie
  docker pull nginx
  docker pull php:$PROJECT_PHP_VERSION
  docker pull jwilder/nginx-proxy

  # Remove 'source' container if this is production
  echo "Rebuilding/recreating all containers..."
  if [[ $PRODUCTION ]]; then
    docker-compose rm -f source
  fi

  docker-compose build
}
_decompose-process-build_help() {
  echo "  Build the project"
}

_decompose-process-up() {
  docker-compose up -d

  # Restart nginx-proxy
  _decompose-process-restart_nginx_proxy
}
_decompose-process-up_help() {
  echo "  Start project locally"
}

_decompose-process-drush() {
  # Get the name of the php container
  local cid=$(docker-compose ps -q php)

  docker exec -it $cid drush $1
}
_decompose-process-drush_help() {
  echo "  Run drush with parameters"
}

_decompose-process-import_db() {
  # Verify the the first parameter is a file
  local sql_file=$1
  if [ ! -e "$sql_file" ]; then
    echo "File '$sql_file' does not exist"
    exit 1
  fi

  # Get the name of the database container
  local cid=$(docker-compose ps -q php)

  # Copy file to container /tmp
  docker cp $sql_file $cid:/tmp

  # Import file
  docker exec $cid bash -c "gzip -d < /tmp/$sql_file | drush sqlc"

  # Delete /tmp file
  docker exec $cid rm /tmp/$sql_file
}
_decompose-process-import_db_help() {
  echo "  Import DB passed in as a parameter 1"
}

_decompose-process-import_files() {
  # Verify the the first parameter is a file
  local directory=$1
  if [ ! -d "$directory" ]; then
    echo "Directory '$directory' does not exist"
    exit 1
  fi

  # Get the name of the database container
  local cid=$(docker-compose ps -q php)

  # Copy directory to container
  docker cp $directory/. $cid:$PROJECT_SOURCE_CONTAINER_PATH/sites/default/files

  # Give access to everyone for 'files'
  docker exec $cid chmod -R 777 $PROJECT_SOURCE_CONTAINER_PATH/sites/default/files
}
_decompose-process-import_files_help() {
  echo "  Copies 'files' directory to the php container"
}

# vim:syntax=sh
