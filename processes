# Include common processes
source $(_decompose-project-root)/.decompose/environment/lib/web/processes
source $(_decompose-project-root)/.decompose/environment/lib/common/processes

# Declare processes
DECOMPOSE_PROCESSES=( 'build' 'up' 'import_db' 'explore_db' 'import_files'
  'backup_config' 'tail-dev-email' 'drush'
  "${DECOMPOSE_WEB_PROCESSES[@]}" "${DECOMPOSE_COMMON_PROCESSES[@]}" )

_decompose-process-explore_db() {
  # Get the name of the database container
  local db_container_name=$(docker-compose ps -q db)

  # Enter mysql
  docker exec -it $db_container_name bash -c "mysql -u app_user -ppassword -D app"
}
_decompose-process-explore_db_help() {
  echo "  Explore database"
}

_decompose-process-tail-dev-email() {
  # Get the name of the php container
  local db_container_name=$(docker-compose ps -q php)
  # Tail mail.out
  docker exec -it $db_container_name bash -c "tail -f /tmp/mail.out"
}
_decompose-process-tail-dev-email_help() {
  echo "  Tail the dev email messages being sent"
}

_decompose-process-build() {
  echo "Building decompose templates..."
  decompose-process-templates 

  echo "Creating version file..."
  local project_root=$(_decompose-project-root)
  local git_base_revision="`git -C $project_root describe --tags --match=v* --always --dirty 2>&1`"
  # Set current base version
  echo -e "$PROJECT_ENVIRONMENT\n$git_base_revision" > \
    "$project_root"/"$PROJECT_VERSION_FILE"

  # Pull the latest images
  # Waiting for docker-compose fix:
  # https://github.com/docker/compose/pull/1494
  echo "Updating docker images..."
  docker pull busybox
  docker pull debian:jessie
  docker pull nginx
  docker pull php:$PROJECT_PHP_VERSION
  docker pull jwilder/nginx-proxy

  # Remove 'source' container if this is production
  echo "Rebuilding/recreating all containers..."
  if [[ $PRODUCTION ]]; then
    docker-compose rm -f source
  fi

  docker-compose build
}
_decompose-process-build_help() {
  echo "  Build the project"
}

_decompose-process-up() {
  docker-compose up -d

  # Restart nginx-proxy
  _decompose-process-restart_nginx_proxy
}
_decompose-process-up_help() {
  echo "  Start project locally"
}

_decompose-process-drush() {
  # Get the name of the php container
  local cid=$(docker-compose ps -q php)

  docker exec -it $cid drush $1
}
_decompose-process-drush_help() {
  echo "  Run drush with parameters"
}

_decompose-process-import_db() {
  # Verify the the first parameter is a file
  local sql_file=$1
  if [ ! -e "$sql_file" ]; then
    echo "File '$sql_file' does not exist"
    exit 1
  fi

  # Get the name of the database container
  local cid=$(docker-compose ps -q php)

  # Copy file to container /tmp
  docker cp $sql_file $cid:/tmp

  # Import file
  docker exec $cid bash -c "gzip -d < /tmp/$sql_file | drush sqlc"

  # Delete /tmp file
  docker exec $cid rm /tmp/$sql_file
}
_decompose-process-import_db_help() {
  echo "  Import DB passed in as a parameter 1"
}

_decompose-process-import_files() {
  # Verify the the first parameter is a file
  local directory=$1
  if [ ! -d "$directory" ]; then
    echo "Directory '$directory' does not exist"
    exit 1
  fi

  # Get the name of the database container
  local cid=$(docker-compose ps -q php)

  # Copy directory to container
  docker cp $directory/. $cid:/srv/http/source/sites/default/files
}
_decompose-process-import_files_help() {
  echo "  Copies 'files' directory to the php container"
}

_decompose-process-backup_config() {
  echo "TODO!!"
  #echo "Backing up config..."
  #local project_root; _decompose-project-root project_root

  #local string_time=$(date +%s)
  #local config_name=$PROJECT_NGINX_VIRTUAL_HOST_PROD
  #local asc_files=$(cd "$project_root";\
  #  echo ./containers/backup/.duply/site_data/*.asc)

  #mkdir -p "$project_root"/backup_config
  #tar -C "$project_root" \
  #  -cvzf "$project_root"/backup_config/$config_name-config-$string_time".tar.gz" \
  #  --exclude="*.git" \
  #  ./.decompose \
  #  ./containers/backup/.ssh \
  #  $asc_files
}
_decompose-process-backup_config_help() {
  local project_root=$(_decompose-project-root)
  echo "  TODO: Creates backup file of the current configuration for safe keeping"
  echo "  File is copied to '$project_root/backup_config' directory"
}

# vim:syntax=sh
